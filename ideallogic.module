<?php

/**
 * @file
 * A description of what your module does.
 */

/**
 * Implements hook_menu().
 */
function ideallogic_menu() {
  $items = [];
  $items['program'] = [
    'title' => 'Programs',
    'description' => 'Main page',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => ['access content'],
    'menu_name' => 'main-menu',
    'page callback' => 'ideallogic_home',
  ];
  $items['program/%'] = [
    'title' => 'Programs',
    'description' => 'More Program Course Info',
    'page callback' => '_ideallogic_course_list_page',
    'page arguments' => [1],
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];
  $items['admin/config/services/ideallogic'] = [
    'title' => 'Ideal-logic',
    'description' => 'Add your Ideal-logic API Key.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ideallogic_admin_configure'],
    'access arguments' => ['administer site configuration'],
    'file' => 'ideallogic.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  ];
  return $items;
}

/**
 * Implements hook_theme().
 */
function ideallogic_theme($existing, $type, $theme, $path) {
  return [
    'ideallogic_program_block' => [
      'template' => 'templates/block--ideallogic',
      'variables' => [
        'items' => NULL,
      ],
    ],
    'ideallogic_courses' => [
      'template' => 'templates/ideallogic-courses',
      'variables' => [
        'courses' => NULL,
      ],
    ],
  ];
}

/**
 * Page for all Programs.
 */
function ideallogic_home() {
  return _ideallogic_landing_content();
}

/**
 * Page data for the course.
 *
 * @param string $program_id
 *   The program ID to query courses for.
 *
 * @return string
 *   An HTML string representing the themed output.
 */
function _ideallogic_course_list_page($program_id) {
  drupal_add_css(drupal_get_path('module', 'ideallogic') . '/assets/ideallogic_program_list.css');
  drupal_add_js(drupal_get_path('module', 'ideallogic') . '/assets/ideallogic_program_list.js');
  $decoded_program_data = _get_ideallogic_data($program_id);
  $program_section = [];
  foreach ($decoded_program_data as $data) {
    $program_data_id = $data['program']['id'];
    $start_date = strtotime($data['start_date']);
    $end_date = strtotime($data['end_date']);
    $program_section[$program_data_id]['name'] = $data['program']['name'];
    $program_section[$program_data_id]['courses'][$data['identification']]['brief_description'] = $data['course']['description'];
    $program_section[$program_data_id]['courses'][$data['identification']]['location'] = $data['course']['delivery'];
    $program_section[$program_data_id]['courses'][$data['identification']]['instructors'] = $data['instructors'];
    $program_section[$program_data_id]['courses'][$data['identification']]['section'][] = [
      'section_id' => $data['id'],
      'section_name' => $data['course']['name'],
      'program_name' => $data['program']['name'],
      'section_slots' => $data['slots'],
      'section_slots_remaining' => $data['num_remaining_slots'],
      'registration_url' => l(t('Register for this session'), $data['registration_url']),
      'start_date_full' => format_date($start_date),
      'start_date_month' => format_date($start_date, 'custom', 'M'),
      'start_date_day' => format_date($start_date, 'custom', 'd'),
      'start_date_time' => format_date($start_date, 'custom', 'h:m A'),
      'end_date_full' => format_date($end_date),
      'end_date_month' => format_date($end_date, 'custom', 'M'),
      'end_date_day' => format_date($end_date, 'custom', 'd'),
      'end_date_time' => format_date($end_date, 'custom', 'h:m A'),
    ];
  }
  return theme('ideallogic_courses', ['items' => $program_section]);
}

/**
 * Implements hook_block_info().
 */
function ideallogic_block_info() {
  $blocks = [];
  $blocks['ideallogic_program'] = [
    'info' => t('Ideal-Logic Program Info'),
  ];
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ideallogic_block_view($delta = '') {
  $block = [];
  switch ($delta) {
    case 'ideallogic_program':
      $block['subject'] = NULL;
      $block['content'] = [
        '#markup' => _ideallogic_landing_content(),
        '#attached' => [
          'css' => [
            drupal_get_path('module', 'ideallogic') . '/assets/ideallogic_landing.css',
          ],
        ],
      ];
      break;
  }

  return $block;
}

/**
 * Render function to get data all programs.
 *
 * @return string
 *   An HTML string representing the themed output.
 */
function _ideallogic_landing_content() {
  $program_key = variable_get('ideallogic_program_id');
  $decoded_data = _get_ideallogic_data($program_key);
  if (!is_array($decoded_data)) {
    drupal_set_message(
      t('You need to configure your Ideal-logic api key.'),
      'error'
    );
    return '';
  }
  $program_data = [];
  foreach ($decoded_data as $value) {
    $course_key = $value['all_programs'][1]['id'];
    if (array_key_exists($course_key, $program_data) && $course_key != $program_key) {
      $program_data[$course_key]['count'] += 1;
    }
    elseif ($course_key != $program_key) {
      $program_data[$course_key] = [
        'count' => 1,
        'name' => $value['all_programs'][1]['name'],
        'link' => l(t('See courses'), url('/program/' . check_plain($course_key)), [
          'attributes' => [
            'class' => 'program-link',
          ],
        ]),
      ];
    }
  }
  return theme('ideallogic_program_block', ['items' => $program_data]);
}

/**
 * Perform a request to Ideal-logic api and return the value or error.
 *
 * @param string $program_key
 *   The Program ID to request on.
 *
 * @return mixed
 *   Either return a JSON decoded array or the request error object.
 */
function _get_ideallogic_data($program_key) {
  $api_key = variable_get('ideallogic_api_key', '');

  $data = drupal_http_build_query(['key' => $api_key]);

  $options = [
    'method' => 'POST',
    'data' => $data,
    'headers' => [
      'content-type' => 'application/x-www-form-urlencoded',
    ],
  ];
  $request = !empty($program_key) ? drupal_http_request('https://apps.ideal-logic.com/api/0eeeb538.json?program=' . $program_key,
    $options) : drupal_http_request('https://apps.ideal-logic.com/api/0eeeb538.json', $options);
  if (!isset($request->error)) {
    return drupal_json_decode($request->data);
  }
  else {
    return $request->error;
  }
}

/**
 * Builds an associative array of program keys and names.
 *
 * @return array
 *   The associative array of program id's and their names.
 */
function _build_options_array() {
  $full_course_list = _get_ideallogic_data(NULL);
  $options = [];
  foreach ($full_course_list as $course) {
    $parent_all_program = end($course['all_programs']);
    if (isset($parent_all_program['id']) && !empty($parent_all_program['name'])) {
      $options[$parent_all_program['id']] = $parent_all_program['name'];
    }
  }
  asort($options);
  return $options;
}
